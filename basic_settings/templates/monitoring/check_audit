#!/bin/sh
# Managed by puppet

die() {
    echo "$*" >&2
    exit 3
}

# Locate auditctl
AUDITCTL=$(command -v auditctl 2>/dev/null)
[ -n "$AUDITCTL" ] || die "auditctl not available"

# Locate augenrules
AUGENRULES=$(command -v augenrules 2>/dev/null)
[ -n "$AUGENRULES" ] || die "augenrules not available"

# Locate auditctl
AUREPORT=$(command -v aureport 2>/dev/null)
[ -n "$AUREPORT" ] || die "aureport not available"

# Locate awk
AWK=$(command -v awk 2>/dev/null)
[ -n "$AWK" ] || die "akw not available"

# Locate date
DATE=$(command -v date 2>/dev/null)
[ -n "$DATE" ] || die "date not available"

# Locate grep
GREP=$(command -v grep 2>/dev/null)
[ -n "$GREP" ] || die "grep not available"

# Locate printf
PRINTF=$(command -v printf 2>/dev/null)
[ -n "$PRINTF" ] || die "printf not available"

# Locate sed
SED=$(command -v sed 2>/dev/null)
[ -n "$SED" ] || die "sed not available"

<% if @systemd_enable -%>
# Locate systemctl
SYSTEMDCTL=$(command -v systemctl 2>/dev/null)
[ -n "$SYSTEMDCTL" ] || die "systemctl not available"

# Locate journalctl
JOURNALCTL=$(command -v journalctl 2>/dev/null)
[ -n "$JOURNALCTL" ] || die "journalctl not available"

<% end -%>
# Locate tr
TR=$(command -v tr 2>/dev/null)
[ -n "$TR" ] || die "tr not available"

# Locate ps
PS=$(command -v ps 2>/dev/null)
[ -n "$PS" ] || die "ps not available"

# Default values
DROPPED_CRIT="1"
MSG="Auditd running"
STATE_CODE=0 # 0 OK, 1 WARNING, 2 CRITICAL, 3 UNKNOWN
QUEUE_WARN=""

# Options 
while getopts 'q:d' opt; do
  case "$opt" in
    q) QUEUE_WARN="$OPTARG" ;;
    d) DROPPED_CRIT="$OPTARG" ;;
    *) die "Usage: $0 [-q <int>] [-d <int>]" ;;
  esac
done

# Service running
<% if @systemd_enable -%>
$SYSTEMDCTL is-active --quiet "auditd" || crit "Auditd service is not active"
<% else -%>
$PS -C efs >/dev/null 2>&1 || crit "Auditd service is not active"
<% end -%>

# Check if we have error since boot
ERROR_COUNT=$($JOURNALCTL -b -u auditd -u augenrules --no-pager 2>/dev/null | $GREP -c 'Error')
if [ "$ERROR_COUNT" -gt 0 ]; then
    MSG="$MSG, but errors found since boot"
    STATE_CODE=2
fi

# Get audit rules
RULES_COUNT=$($AUDITCTL -l 2>/dev/null | $GREP '^-' | $AWK 'END{print NR+0}')
if [ "$RULES_COUNT" -eq 0 ]; then
    MSG="$MSG, rules 0"
    STATE_CODE=2
else
    MSG="$MSG, rules $RULES_COUNT"
fi

# Get backlog / dropped counters
AV_STAT=$($AUDITCTL -s 2>/dev/null)
BACKLOG=$($PRINTF "%s" "$AV_STAT" | $SED -n 's/.*backlog=\([0-9]\+\).*/\1/p'); : "${BACKLOG:=0}"
LOST=$($PRINTF "%s" "$AV_STAT" | $SED -n 's/.*lost=\([0-9]\+\).*/\1/p'); : "${LOST:=0}"
BLIMIT=$($PRINTF "%s" "$AV_STAT" | $SED -n 's/.*backlog_limit=\([0-9]\+\).*/\1/p'); : "${BLIMIT:=0}"

# Check result
[ -z "$QUEUE_WARN" ] && QUEUE_WARN=$BLIMIT
if [ "$BACKLOG" -gt "$QUEUE_WARN" ]; then
    MSG="$MSG, backlog $BACKLOG"
    [ $STATE_CODE -lt 1 ] && STATE_CODE=1
fi
if [ "$LOST" -gt "$DROPPED_CRIT" ]; then
    MSG="$MSG, dropped $LOST"
    STATE_CODE=2 
fi

# Rules‑integriteit (augenrules --check)
if $AUGENRULES --check >/dev/null 2>&1; then
  MSG="$MSG, augenrules OK"
else
  MSG="$MSG, augenrules diff"
  [ $STATE_CODE -lt 1 ] && STATE_CODE=1
fi

# Get audit report
TODAY="$($DATE '+%Y-%m-%d 00:00:00')"
SUM=$($AUREPORT --summary --start "$TODAY" --end now 2>/dev/null)
get(){ $PRINTF "%s" "$SUM" | $AWK -v p="$1" 'index($0,p)==1{print $NF}' | $TR -dc '0-9'; }

# Get values from report
CFG=$(get "Number of changes in configuration:"); : "${CFG:=0}"
if [ "$CFG" -gt 0 ]; then
    MSG="$MSG, cfg_changes $CFG"
    STATE_CODE=2
fi

ACCT=$(get "Number of changes to accounts, groups, or roles:"); : "${ACCT:=0}"
if [ "$ACCT" -gt 0 ]; then
    MSG="$MSG, acct_changes $ACCT"
    STATE_CODE=2
fi

FAIL=$(get "Number of failed syscalls:"); : "${FAIL:=0}"
if [ "$FAIL" -gt 0 ]; then
    MSG="$MSG, failed_syscalls $FAIL"
    STATE_CODE=2
fi

ANOM=$(get "Number of anomaly events:"); : "${ANOM:=0}"
if [ "$ANOM" -gt 0 ]; then
    MSG="$MSG, failed_syscalls $ANOM"
    STATE_CODE=2
fi

# Performances data
FAILED_AUTH=$(get "Number of failed authentications:"); : "${FAILED_AUTH:=0}"

<% if @systemd_enable -%>
# Get boot reports
NOW=$($DATE +%s)
BOOT_SUM="$($JOURNALCTL --list-boots --no-pager 2>/dev/null)"
BOOT_STARTS="$($PRINTF "%s" "$BOOT_SUM" | $AWK 'NR>1{for(i=1;i<=NF-3;i++) if ($i ~ /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun)$/){print $i, $(i+1), $(i+2), $(i+3); break}}')"
REBOOT_FLAG=0
SUSPICIOUS=""

# Check if boot starts are within 24 hours
while IFS= read -r ts; do
  [ -z "$ts" ] && continue
  sec=$(date -d "$ts" +%s 2>/dev/null) || continue
  if [ "$sec" -ge $((NOW-86400)) ]; then
    REBOOT_FLAG=1;
    SUSPICIOUS="${SUSPICIOUS}Boot on $ts,";
  fi
done <<EOF
$BOOT_STARTS
EOF

# Check if reboot flag is set
if [ "$REBOOT_FLAG" -eq 1 ]; then
    SUSPICIOUS=${SUSPICIOUS%', '}
    MSG="$MSG, reboot <24h ($SUSPICIOUS)"
    [ $STATE_CODE -lt 1 ] && STATE_CODE=1
fi

# Check if kernel version has changed
KERNEL_CURRENT=$(uname -r)
KERNEL_BOOT=$($JOURNALCTL -b -1 --no-pager 2>/dev/null | $GREP -m1 -i 'Linux version' | $SED -n 's/.*Linux version \([^ ]*\).*/\1/p')
if [ -n "$KERNEL_BOOT" ] && [ "$KERNEL_BOOT" != "$KERNEL_CURRENT" ]; then
    MSG="$MSG, kernel change (${KERNEL_BOOT}→${KERNEL_CURRENT})" ;
    [ $STATE_CODE -lt 1 ] && STATE_CODE=1 ;
fi
<% end -%>

# Events / sec
EVENT_START=$($DATE -d '5 minute ago' '+%Y-%m-%d %H:%M:%S')
EVENT_REPORT=$($AUREPORT --start "$EVENT_START" --end now --event 2>/dev/null | $AWK 'NR>2{c+=$2}END{print c+0}')
EVENT_RESULT=$($AWK "BEGIN{printf \"%.2f\", (${EVENT_REPORT:-0})/300}")

# Create perf data
PERF="acct_changes=${ACCT};;1"
PERF="$PERF anomaly_events=${ANOM};;1"
PERF="$PERF cfg_changes=${CFG};;1"
PERF="$PERF dropped=${LOST};;${DROPPED_CRIT}"
PERF="$PERF errors=${ERROR_COUNT};;1"
PERF="$PERF events_per_sec=${EVENT_RESULT}"
PERF="$PERF failed_auth=${FAILED_AUTH}"
PERF="$PERF failed_syscalls=${FAIL};;1"
PERF="$PERF rules=${RULES_COUNT};;0;0"
PERF="$PERF queue=${BACKLOG};${QUEUE_WARN}"

# Show output
$PRINTF '%s | %s\n' "${MSG#, }" "$PERF"
exit $STATE_CODE
