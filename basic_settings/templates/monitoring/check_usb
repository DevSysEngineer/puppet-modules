#!/bin/sh
# Managed by puppet

die() {
    echo "$*" >&2
    exit 3
}

# Check binaries
CAT=$(command -v cat 2>/dev/null) || die "cat not available"
DATE=$(command -v date 2>/dev/null) || die "date not available"
SED=$(command -v sed 2>/dev/null) || die "sed not available"
TR=$(command -v tr 2>/dev/null)   || die "tr not available"
WC=$(command -v wc 2>/dev/null)   || die "wc not available"

hm2min() {
    H=${1%:*}
    M=${1#*:}
    H=$(printf '%d\n' "$H")
    M=$(printf '%d\n' "$M")
    echo $(( H*60 + M ))
}

# Defaults values
AANYREQ_IDS="" # -a CSV
ANYREQ_LIST="<%= @usb_any_requirements_correct %>"
ANYREQ_MATCHED_LIST=""
ANYREQ_OK=1
ANYREQ_PRESENT_COUNT=0
ANYREQ_SERIALS_ACTIVE=""
ANYREQ_TOTAL_COUNT=0
ANYREQ_VP_IDS_ACTIVE=""
EXPECTED_IDS="" # -e CSV
EXPECTED_LIST="<%= @usb_expected_correct %>"
EXPECTED_LIST_MISSING=""
EXPECTED_PRESENT_COUNT=0
EXPECTED_SERIALS_ACTIVE=""
EXPECTED_TOTAL_COUNT=0
EXPECTED_VP_IDS_ACTIVE=""
MSG=""
NOW_HM=$($DATE +%H:%M)
NOW_MIN=$(hm2min "$NOW_HM")
STATUS_CODE=0
TOTAL_DEV=0
UNAUTHORIZED_COUNT=0
UNAUTHORIZED_DEV_LIST=""
WHITELISTED_COUNT=0
WHITELISTED_DEV_LIST=""
WHITELIST_IDS="" # -w CSV
WHITELIST_LIST="<%= @usb_whitelist_correct %>"
WHITELIST_SERIALS_ACTIVE=""
WHITELIST_VP_IDS_ACTIVE=""

in_window() {
    WIN="$1"
    START=${WIN%-*}
    END=${WIN#*-}
    S=$(hm2min "$START")
    E=$(hm2min "$END")
    if [ "$S" -le "$E" ]; then
        [ "$NOW_MIN" -ge "$S" ] && [ "$NOW_MIN" -le "$E" ] && echo 1 || echo 0
    else
        [ "$NOW_MIN" -ge "$S" ] || [ "$NOW_MIN" -le "$E" ] && echo 1 || echo 0
    fi
}

parse_item() {
    ITEM="$1"
    PARSE_BASE="$ITEM"
    PARSE_WIN=""
    case "$ITEM" in
        *@*)
            PARSE_BASE=${ITEM%%@*}
            PARSE_WIN=${ITEM#*@}
            ;;
        *:*)
            SUF=${ITEM##*:}
            case "$SUF" in
                ??:??-??:??)
                    PARSE_BASE=${ITEM%:*}
                    PARSE_WIN=$SUF
                    ;;
                *) : ;;
            esac
            ;;
        *) : ;;
    esac
}

# Parse options (each expects an argument)
while getopts "w:e:a:" OPT; do
    case "$OPT" in
        w) WHITELIST_IDS="$OPTARG" ;;
        e) EXPECTED_IDS="$OPTARG"  ;;
        a) ANYREQ_IDS="$OPTARG"    ;;
        *) die "Usage: $0 [-w <list>] [-e <list>] [-a <list>]" ;;
    esac
done

# Normalize CSV -> space-separated lists (only if provided)
[ -n "$WHITELIST_IDS" ] && WHITELIST_LIST=$(printf '%s' "$WHITELIST_IDS" | $TR ',' ' ')
[ -n "$EXPECTED_IDS"  ] && EXPECTED_LIST=$(printf '%s' "$EXPECTED_IDS"  | $TR ',' ' ')
[ -n "$ANYREQ_IDS"    ] && ANYREQ_LIST=$(printf '%s' "$ANYREQ_IDS"    | $TR ',' ' ')

# Build ACTIVE lists (respect time windows)
# Expected
for ITEM in $EXPECTED_LIST; do
    parse_item "$ITEM"
    BASE="$PARSE_BASE"; WIN="$PARSE_WIN"; ACTIVE=1
    case "$WIN" in
        ??:??-??:??) ACTIVE=$(in_window "$WIN") ;;
        *) ACTIVE=1 ;;
    esac
    [ "$ACTIVE" -ne 1 ] && continue
    case "$BASE" in
        *:*) EXPECTED_VP_IDS_ACTIVE="$EXPECTED_VP_IDS_ACTIVE $(printf '%s' "$BASE" | $TR 'A-F' 'a-f')" ;;
        *)   EXPECTED_SERIALS_ACTIVE="$EXPECTED_SERIALS_ACTIVE $BASE" ;;
    esac
done
[ -n "$EXPECTED_SERIALS_ACTIVE" ] && EXPECTED_TOTAL_COUNT=$(( EXPECTED_TOTAL_COUNT + $(printf '%s\n' "$EXPECTED_SERIALS_ACTIVE" | $WC -w) ))
[ -n "$EXPECTED_VP_IDS_ACTIVE" ] && EXPECTED_TOTAL_COUNT=$(( EXPECTED_TOTAL_COUNT + $(printf '%s\n' "$EXPECTED_VP_IDS_ACTIVE" | $WC -w) ))

# Whitelist
for ITEM in $WHITELIST_LIST; do
    parse_item "$ITEM"
    BASE="$PARSE_BASE"; WIN="$PARSE_WIN"; ACTIVE=1
    case "$WIN" in
        ??:??-??:??) ACTIVE=$(in_window "$WIN") ;;
        *) ACTIVE=1 ;;
    esac
    [ "$ACTIVE" -ne 1 ] && continue
    case "$BASE" in
        *:*) WHITELIST_VP_IDS_ACTIVE="$WHITELIST_VP_IDS_ACTIVE $(printf '%s' "$BASE" | $TR 'A-F' 'a-f')" ;;
        *)   WHITELIST_SERIALS_ACTIVE="$WHITELIST_SERIALS_ACTIVE $BASE" ;;
    esac
done

# Any-required
for ITEM in $ANYREQ_LIST; do
    parse_item "$ITEM"
    BASE="$PARSE_BASE"; WIN="$PARSE_WIN"; ACTIVE=1
    case "$WIN" in
        ??:??-??:??) ACTIVE=$(in_window "$WIN") ;;
        *) ACTIVE=1 ;;
    esac
    [ "$ACTIVE" -ne 1 ] && continue
    case "$BASE" in
        *:*) ANYREQ_VP_IDS_ACTIVE="$ANYREQ_VP_IDS_ACTIVE $(printf '%s' "$BASE" | $TR 'A-F' 'a-f')" ;;
        *)   ANYREQ_SERIALS_ACTIVE="$ANYREQ_SERIALS_ACTIVE $BASE" ;;
    esac
done
[ -n "$ANYREQ_SERIALS_ACTIVE" ] && ANYREQ_TOTAL_COUNT=$(( ANYREQ_TOTAL_COUNT + $(printf '%s\n' "$ANYREQ_SERIALS_ACTIVE" | $WC -w) ))
[ -n "$ANYREQ_VP_IDS_ACTIVE" ] && ANYREQ_TOTAL_COUNT=$(( ANYREQ_TOTAL_COUNT + $(printf '%s\n' "$ANYREQ_VP_IDS_ACTIVE" | $WC -w) ))

# Enumerate USB devices via sysfs (ignore host controllers vendor 1d6b)
for DEVPATH in /sys/bus/usb/devices/*; do
    [ -f "$DEVPATH/idVendor" ] || continue

    VID=$($CAT "$DEVPATH/idVendor" 2>/dev/null | $TR 'A-F' 'a-f')
    PID=$($CAT "$DEVPATH/idProduct" 2>/dev/null | $TR 'A-F' 'a-f')
    [ "$VID" = "1d6b" ] && continue  # Linux Foundation root hub (USB host controller)

    TOTAL_DEV=$(( TOTAL_DEV + 1 ))

    # Safe serial read (strip CR if present)
    if [ -f "$DEVPATH/serial" ]; then
        SERIAL=$(tr -d '\r' < "$DEVPATH/serial" 2>/dev/null)
    else
        SERIAL=""
    fi
    PRODUCT=$($CAT "$DEVPATH/product" 2>/dev/null)
    MANUFACTURER=$($CAT "$DEVPATH/manufacturer" 2>/dev/null)

    # Friendly name
    DEVNAME=""
    [ -n "$MANUFACTURER" ] && DEVNAME="$MANUFACTURER"
    [ -n "$PRODUCT" ] && DEVNAME="$DEVNAME $PRODUCT"
    DEVNAME=$(printf '%s' "$DEVNAME" | $SED 's/^ //; s/ $//')
    [ -z "$DEVNAME" ] && DEVNAME="$VID:$PID"

    # Flags
    IN_EXPECTED=0
    IN_WHITELIST=0
    IN_ANYREQ=0

    # Expected?
    if [ -n "$SERIAL" ]; then
        for EXP_SER in $EXPECTED_SERIALS_ACTIVE; do
            [ "$SERIAL" = "$EXP_SER" ] && IN_EXPECTED=1 && break
        done
    fi
    if [ $IN_EXPECTED -eq 0 ]; then
        for EXP_ID in $EXPECTED_VP_IDS_ACTIVE; do
            [ "$VID:$PID" = "$EXP_ID" ] && IN_EXPECTED=1 && break
        done
    fi

    # Whitelisted?
    if [ -n "$SERIAL" ]; then
        for WL_SER in $WHITELIST_SERIALS_ACTIVE; do
            [ "$SERIAL" = "$WL_SER" ] && IN_WHITELIST=1 && break
        done
    fi
    if [ $IN_WHITELIST -eq 0 ]; then
        for WL_ID in $WHITELIST_VP_IDS_ACTIVE; do
            [ "$VID:$PID" = "$WL_ID" ] && IN_WHITELIST=1 && break
        done
    fi

    # Any-required?
    if [ -n "$SERIAL" ]; then
        for AR_SER in $ANYREQ_SERIALS_ACTIVE; do
            [ "$SERIAL" = "$AR_SER" ] && IN_ANYREQ=1 && break
        done
    fi
    if [ $IN_ANYREQ -eq 0 ]; then
        for AR_ID in $ANYREQ_VP_IDS_ACTIVE; do
            [ "$VID:$PID" = "$AR_ID" ] && IN_ANYREQ=1 && break
        done
    fi

    # Tallies
    [ $IN_EXPECTED  -eq 1 ] && EXPECTED_PRESENT_COUNT=$(( EXPECTED_PRESENT_COUNT + 1 ))
    if [ $IN_WHITELIST -eq 1 ]; then
        WHITELISTED_COUNT=$(( WHITELISTED_COUNT + 1 ))
        WHITELISTED_DEV_LIST="$WHITELISTED_DEV_LIST, $DEVNAME"
        [ -n "$SERIAL" ] && WHITELISTED_DEV_LIST="$WHITELISTED_DEV_LIST (SN: $SERIAL)"
    fi
    if [ $IN_ANYREQ -eq 1 ]; then
        ANYREQ_PRESENT_COUNT=$(( ANYREQ_PRESENT_COUNT + 1 ))
        ANYREQ_MATCHED_LIST="$ANYREQ_MATCHED_LIST, $DEVNAME"
        [ -n "$SERIAL" ] && ANYREQ_MATCHED_LIST="$ANYREQ_MATCHED_LIST (SN: $SERIAL)"
    fi

    # Unauthorized only if unmatched everywhere
    if [ $IN_EXPECTED -eq 0 ] && [ $IN_WHITELIST -eq 0 ] && [ $IN_ANYREQ -eq 0 ]; then
        UNAUTHORIZED_COUNT=$(( UNAUTHORIZED_COUNT + 1 ))
        UNAUTHORIZED_DEV_LIST="$UNAUTHORIZED_DEV_LIST, $DEVNAME"
        if [ -n "$SERIAL" ]; then
            UNAUTHORIZED_DEV_LIST="$UNAUTHORIZED_DEV_LIST (SN: $SERIAL)"
        else
            UNAUTHORIZED_DEV_LIST="$UNAUTHORIZED_DEV_LIST (no serial)"
        fi
    fi
done

# Expected missing (only ACTIVE expected items)
for EXP in $EXPECTED_SERIALS_ACTIVE; do
    FOUND=0
    for DEVPATH in /sys/bus/usb/devices/*; do
        [ -f "$DEVPATH/idVendor" ] || continue
        [ "$($CAT "$DEVPATH/idVendor" 2>/dev/null | $TR 'A-F' 'a-f')" = "1d6b" ] && continue
        SERIAL=$(tr -d '\r' < "$DEVPATH/serial" 2>/dev/null)
        [ -n "$SERIAL" ] && [ "$SERIAL" = "$EXP" ] && FOUND=1 && break
    done
    [ $FOUND -eq 0 ] && EXPECTED_LIST_MISSING="$EXPECTED_LIST_MISSING, $EXP"
done

for EXP in $EXPECTED_VP_IDS_ACTIVE; do
    FOUND=0
    for DEVPATH in /sys/bus/usb/devices/*; do
        [ -f "$DEVPATH/idVendor" ] || continue
        [ "$($CAT "$DEVPATH/idVendor" 2>/dev/null | $TR 'A-F' 'a-f')" = "1d6b" ] && continue
        VID=$($CAT "$DEVPATH/idVendor" 2>/dev/null | $TR 'A-F' 'a-f')
        PID=$($CAT "$DEVPATH/idProduct" 2>/dev/null | $TR 'A-F' 'a-f')
        [ "$VID:$PID" = "$EXP" ] && FOUND=1 && break
    done
    [ $FOUND -eq 0 ] && EXPECTED_LIST_MISSING="$EXPECTED_LIST_MISSING, $EXP"
done

# Trim lists
WHITELISTED_DEV_LIST=$(printf '%s' "$WHITELISTED_DEV_LIST" | $SED 's/^, //')
UNAUTHORIZED_DEV_LIST=$(printf '%s' "$UNAUTHORIZED_DEV_LIST" | $SED 's/^, //')
EXPECTED_LIST_MISSING=$(printf '%s' "$EXPECTED_LIST_MISSING" | $SED 's/^, //')
ANYREQ_MATCHED_LIST=$(printf '%s' "$ANYREQ_MATCHED_LIST" | $SED 's/^, //')

# Status / message
if [ $UNAUTHORIZED_COUNT -gt 0 ] || [ -n "$EXPECTED_LIST_MISSING" ]; then
    STATUS_CODE=2
    [ $UNAUTHORIZED_COUNT -gt 0 ] && MSG="Unauthorized USB device(s) detected: $UNAUTHORIZED_DEV_LIST. "
    [ -n "$EXPECTED_LIST_MISSING" ] && MSG="${MSG}Expected USB device(s) missing: $EXPECTED_LIST_MISSING. "
else
    if [ -n "$EXPECTED_SERIALS_ACTIVE" ] || [ -n "$EXPECTED_VP_IDS_ACTIVE" ]; then
        MSG="All expected USB device(s) present. "
    else
        MSG="No unauthorized USB devices detected. "
    fi
fi

# Any-required policy
if [ "$ANYREQ_TOTAL_COUNT" -gt 0 ] && [ "$ANYREQ_PRESENT_COUNT" -eq 0 ]; then
    ANYREQ_OK=0
    STATUS_CODE=2
    MSG="${MSG}Any-required policy not met (none present from provided list). "
fi

# Tails
[ -n "$ANYREQ_MATCHED_LIST" ]  && MSG="${MSG}Any-required matched: $ANYREQ_MATCHED_LIST. "
[ -n "$WHITELISTED_DEV_LIST" ] && MSG="${MSG}Whitelisted attached: $WHITELISTED_DEV_LIST. "

# Perfdata (ACTIVE items only for expected/any-required totals)
PERF="usb_total=${TOTAL_DEV}"
PERF="$PERF expected_present=${EXPECTED_PRESENT_COUNT}"
PERF="$PERF expected_missing=$(( EXPECTED_TOTAL_COUNT - EXPECTED_PRESENT_COUNT ))"
PERF="$PERF whitelisted_present=${WHITELISTED_COUNT}"
PERF="$PERF unauthorized_count=${UNAUTHORIZED_COUNT};;1"
PERF="$PERF any_required_total=${ANYREQ_TOTAL_COUNT}"
PERF="$PERF any_required_present=${ANYREQ_PRESENT_COUNT}"
PERF="$PERF any_required_ok=${ANYREQ_OK}"

# Output
printf '%s| %s\n' "$MSG" "$PERF"
exit $STATUS_CODE
