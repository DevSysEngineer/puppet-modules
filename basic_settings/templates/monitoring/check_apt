#!/bin/sh

# Managed by puppet

die() {
    printf 'UNKNOWN - %s\n' "$*" >&2
    exit 3
}

# Locate apt
APT=$(command -v apt 2>/dev/null)
[ -n "$APT" ] || die "apt not available"

# Locate awk
AWK=$(command -v awk 2>/dev/null)
[ -n "$AWK" ] || die "awk not available"

# Locate date
DATE=$(command -v date 2>/dev/null)
[ -n "$DATE" ] || die "date not available"

# Locate find
FIND=$(command -v find 2>/dev/null)
[ -n "$FIND" ] || die "find not available"

# Locate stat
STAT=$(command -v stat 2>/dev/null)
[ -n "$STAT" ] || die "stat not available"

# Locate sort
SORT=$(command -v sort 2>/dev/null)
[ -n "$SORT" ] || die "sort not available"

<% if @systemd_enable -%>
# Locate systemctl
SYSTEMCTL=$(command -v systemctl 2>/dev/null)
[ -n "$SYSTEMCTL" ] || die "systemctl not available"

<% end -%>
# Locate printf
PRINTF=$(command -v printf 2>/dev/null)
[ -n "$PRINTF" ] || die "printf not available"

# Set some values
BLACKLIST_FILE="<%= @apt_settings_file %>"
UPDATES_BLACKLISTED=0
UPDATES_TOTAL=0
UPDATES_SECURITY=0
TIMESTAMP_UNKNOWN=0
LAST_UPDATE_TIMESTAMP=""
STATE_CODE=0  # 0 OK, 1 WARNING, 2 CRITICAL, 3 UNKNOWN
STATE_LABEL="OK"
GRACE=172800 # 48 hours in seconden

# Extra options
while getopts "c:" opt; do
    case "$opt" in
        c) GRACE=$OPTARG ;;
        *) die "Usage: $0 [-c <seconds>]" ;;
    esac
done

# Try to get timesatmp
STAMP_FILE=/var/lib/apt/periodic/update-success-stamp
if [ -e "$STAMP_FILE" ]; then
    LAST_UPDATE_TIMESTAMP=$("$STAT" -c %Y "$STAMP_FILE" 2>/dev/null)
elif [ -d /var/lib/apt/lists ]; then
    LAST_UPDATE_TIMESTAMP=$("$FIND" /var/lib/apt/lists -type f ! -name lock ! -path "*/partial/*" -printf '%T@\n' 2>/dev/null | $SORT -n | $AWK 'END{print}')
fi

# Check if we have timestamp
if [ -n "$LAST_UPDATE_TIMESTAMP" ]; then
    CURRENT_TIME=$("$DATE" +%s)
    LAST_UPDATE_SEC=${LAST_UPDATE_TIMESTAMP%%.*}
    LAST_UPDATE_AGE_SEC=$((CURRENT_TIME - LAST_UPDATE_SEC))
else
    LAST_UPDATE_AGE_SEC=0
fi

# Check if timestamp is invalid
[ "$LAST_UPDATE_AGE_SEC" -le 0 ] && TIMESTAMP_UNKNOWN=1

# Try to get blacklist patterns
BLACKLIST_PATTERNS=$("$AWK" '
    /^[[:space:]]*Package-Blacklist/ {inblk=1; next}
    inblk && /^[[:space:]]*}/ {exit}
    inblk && match($0,/"[^"]+"/) {
        print substr($0, RSTART+1, RLENGTH-2)
    }
' "$BLACKLIST_FILE")

# Run apt simulation
APT_SIM_OUTPUT=$(LC_ALL=C $APT -s -o Debug::NoLocking=1 dist-upgrade 2>&1) || die "APT simulation failed"
APT_SIM_SUMMARY=$(printf '%s\n' "$APT_SIM_OUTPUT" | "$AWK" '
    /^Inst / {
        total++; pkg=$2
        pkgs[pkg]=1
        if (tolower($0) ~ /security/) sec++
    }
    END {
        for (p in pkgs) printf "PKG:%s\n", p
        printf "TOT:%d\nSEC:%d\n", total, sec
    }')
    
# Get some data
UPDATES_TOTAL=$(printf '%s\n' "$APT_SIM_SUMMARY" | "$AWK" -F: '/^TOT:/ {print $2}')
UPDATES_SECURITY=$(printf '%s\n' "$APT_SIM_SUMMARY" | "$AWK" -F: '/^SEC:/ {print $2}')
PKG_LIST=$(printf '%s\n' "$APT_SIM_SUMMARY" | "$AWK" -F: '/^PKG:/ {print $2}')

# Check if we have updates in backlist patterns
if [ "$UPDATES_TOTAL" -gt 0 ] && [ -n "$BLACKLIST_PATTERNS" ]; then
    for pkg in $PKG_LIST; do
        for pat in $BLACKLIST_PATTERNS; do
            case "$pkg" in
                $pat) UPDATES_BLACKLISTED=$((UPDATES_BLACKLISTED+1)); break ;;
            esac
        done
    done
fi

# Do only when timestamp is valid
if [ "$TIMESTAMP_UNKNOWN" -eq 0 ]; then
    if [ "$LAST_UPDATE_AGE_SEC" -ge "$GRACE" ] || [ "$UPDATES_SECURITY" -gt 0 ]; then
        STATE_CODE=2
        STATE_LABEL="CRITICAL"
    elif [ "$UPDATES_TOTAL" -gt 0 ]; then
        STATE_CODE=1
        STATE_LABEL="WARNING"
    fi
else
    STATE_CODE=3
    STATE_LABEL="UNKNOWN"
fi

# Set timer active
<% if @systemd_enable -%>
if "$SYSTEMCTL" is-active --quiet apt-daily.timer; then
    TIMER_ACTIVE=1
else
    TIMER_ACTIVE=0
fi
<% else -%>
TIMER_ACTIVE=0
<% end -%>

# Make message
OUTPUT_MSG="APT "
if [ "$TIMESTAMP_UNKNOWN" -eq 0 ]; then
    if [ "$LAST_UPDATE_AGE_SEC" -ge "$GRACE" ]; then
        days=$((LAST_UPDATE_AGE_SEC / 86400))
        OUTPUT_MSG="$OUTPUT_MSG metadata ${days} days old."
    fi
    OUTPUT_MSG="$OUTPUT_MSG ${UPDATES_TOTAL} updates (${UPDATES_SECURITY} security)"
else
    OUTPUT_MSG="$OUTPUT_MSG could not determine last 'apt-get update' timestamp."
    OUTPUT_MSG="$OUTPUT_MSG ${UPDATES_TOTAL} updates detected (${UPDATES_SECURITY} security)"
fi

# Extra message when we have blacklisted updates
if [ "$UPDATES_BLACKLISTED" -gt 0 ]; then
    OUTPUT_MSG="$OUTPUT_MSG, ${UPDATES_BLACKLISTED} blacklisted."
else
    OUTPUT_MSG="$OUTPUT_MSG."
fi

# Timerâ€‘melding
[ "$TIMER_ACTIVE" -eq 0 ] && OUTPUT_MSG="$OUTPUT_MSG apt-updates.timer inactive!"

# Reboot message
if [ -e /var/run/reboot-required ]; then
    OUTPUT_MSG="$OUTPUT_MSG Reboot required!"
    [ "$STATE_CODE" -eq 0 ] && {
        STATE_CODE=2
        STATE_LABEL="WARNING"
    }
fi

# Perfdata
PERF_DATA="total_updates=${UPDATES_TOTAL};1;;0; security_updates=${UPDATES_SECURITY};;1;0; blacklisted_updates=${UPDATES_BLACKLISTED};;0;0; last_update_age=${LAST_UPDATE_AGE_SEC}s;;${GRACE};0; timer_active=${TIMER_ACTIVE};;1;0;1"

# Show output
printf '%s - %s | %s\n' "$STATE_LABEL" "$OUTPUT_MSG" "$PERF_DATA"
exit "$STATE_CODE"
