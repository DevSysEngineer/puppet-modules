#!/bin/sh

# Managed by puppet

die() {
    echo "UNKNOWN - $*" >&2
    exit 3
}

# Locate awk
AWK=$(command -v awk 2>/dev/null)
[ -n "$AWK" ] || die "awk not available"

# Locate printf
PRINTF=$(command -v printf 2>/dev/null)
[ -n "$PRINTF" ] || die "printf not available"

# Locate lsmod
LSMOD=$(command -v lsmod 2>/dev/null)
[ -n "$LSMOD" ] || die "lsmod not available"

# Locate nft
NFT=$(command -v nft 2>/dev/null)
[ -n "$NFT" ] || die "nft not available"

<% if @systemd_enable -%>
# Locate systemctl
SYSTEMCTL=$(command -v systemctl 2>/dev/null)
[ -n "$SYSTEMCTL" ] || die "systemctl not available"

<% end -%>

# Set some default values
BL_ITEMS=0
PERF_DATA=""
RULES_TOTAL=0
SEQ=0
TABLE_COUNT=0
TABLE_EMPTY=""
TABLE_PERF=""
TOTAL_RULES=0

crit() {
    $PRINTF 'CRITICAL - %s\n' "$*" >&2
    exit 2
}

add_pd() {
    LABEL=$($PRINTF '%s\n' "$1" | tr -c 'A-Za-z0-9_' '_')
    PERF_DATA="${PERF_DATA}ctr_${LABEL}=${2:-0}c "
}

<% if @systemd_enable -%>
# Check if nftables is running
$SYSTEMCTL is-active --quiet "nftables" || crit "nftables service is not active"

<% end -%>

# Kernel‑check
$LSMOD | $AWK '/\bnf_tables\b/' >/dev/null 2>&1 || crit "nf_tables kernel module not loaded"

# Try to get ruleset
RULESET=$($NFT list ruleset 2>/dev/null) || crit "cannot get ruleset"
[ -z "$RULESET" ] && crit "Ruleset empty"

# Count rules in tables
KEYVALS=$(printf '%s\n' "$RULESET" | $AWK '
BEGIN { FS=" ";  SUBSEP=SUBSEP; inside=0; tblkey="" }
{
    if ($1=="table") {
        fam=$2; tab=$3; tblkey=fam SUBSEP tab; tbl[tblkey]=1; next
    }
    if ($1=="chain") { inside=1; next }
    if (inside && $0 ~ /^[[:space:]]*}/) { inside=0; next }

    if (inside) {
        if ($0 ~ /^[[:space:]]*$/) next
        if ($0 ~ /^[[:space:]]*#/) next
        if ($1 ~ /^(type|policy|set|counter|flags|elements|size|timeout)$/) next
        rules[tblkey]++
    }
}
END {
    tot=0; perf=""; emp="";
    for (k in tbl) {
        n = (k in rules) ? rules[k] : 0; tot += n
        split(k, a, SUBSEP); fam=a[1]; tab=a[2]
        perf = perf "table_" fam "_" tab "=" n " "
        if (!n) emp = emp " " fam "/" tab
    }
    printf "rules_total=%d\n",  tot
    printf "table_count=%d\n",  length(tbl)
    printf "table_perf=%s\n",   perf
    printf "table_empty=%s\n",  emp
}')

# Variabelen in de hoofd‑shell zetten
while IFS='=' read -r K V; do
  case $K in
     rules_total) TOTAL_RULES=$V ;;
     table_count) TABLE_COUNT=$V ;;
     table_perf)  TABLE_PERF=$V  ;;
     table_empty) TABLE_EMPTY=$V ;;
  esac
done <<EOF
$KEYVALS
EOF

# Check if we have rules
[ -n "$TABLE_EMPTY" ] && crit "No rules in tables | rules_total=$TOTAL_RULES $TABLE_PERF"

# Check if we have backlist sets
printf '%s\n' "$RULESET" | $AWK '
BEGIN { RS="\n"; fam=""; tab=""; inst=0; dyn=0; setn="" }
{
    if ($1=="table") { fam=$2; tab=$3 }
    if ($1=="set")   { setn=$2; dyn=(index($0,"dynamic")>0); inst=1; next }
    if (inst) {
        if (index($0,"dynamic")>0) dyn=1
        if ($0 ~ /}/) {
            if (dyn) print fam,tab,setn
            inst=0; dyn=0
        }
  }
}' | while read -r FAM TAB SET; do
    CNT=$($NFT list set "$FAM" "$TAB" "$SET" 2>/dev/null | $AWK -v RS='' '
    /elements[ \t]*=/{
        gsub(/[{},]/," "); n=split($0,a);
        c=0; for(i=1;i<=n;i++) {
            gsub(/^[ \t]+|[ \t]+$/,"",a[i])
            if (a[i]~/^[0-9]+(\.[0-9]+){3}(\/[0-9]+)?$/||index(a[i],":")) c++
        }
        print c
    }
    ')
    BL_ITEMS=$((BL_ITEMS + ${CNT:-0}))
done

echo 'TEST2'

# Set performance data
PERF_DATA="$TABLE_PERF"

# Named counters
printf '%s\n' "$RULESET" | $AWK -v RS='}' '
/^[[:space:]]*counter[[:space:]]+[[:alnum:]_]+/{
    for (i = 1; i <= NF; i++)
        if ($i == "packets" && (i+1) <= NF) {
            print $2, $(i+1)
            break
        }
}' | while read -r N P; do add_pd "ctr_$N" "$P"; done

echo 'TEST5'

# Inline counters
SEQ=0
printf '%s\n' "$RULESET" | $AWK '/counter[ \t]+packets[ \t]+[0-9]+/ {print}' |
while IFS= read -r L; do
  P=$(printf '%s\n' "$L" | $AWK '{for(i=1;i<=NF;i++) if($i=="packets"){print $(i+1); break}}')
  C=$(printf '%s\n' "$L" | $AWK '{for(i=1;i<=NF;i++) if($i=="comment"){print $(i+1); break}}' | tr -d '"')
  [ -z "$C" ] && { SEQ=$((SEQ+1)); C="rule_$SEQ"; }
  add_pd "ctr_$C" "$P"
done

# Show output
echo "OK - $TOTAL_RULES rules in $TABLE_COUNT table(s), blacklist=$BL_ITEMS | rules_total=$TOTAL_RULES $PERF_DATA""blacklist_items=$BL_ITEMS"
exit 0