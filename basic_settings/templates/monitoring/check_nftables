#!/bin/sh

# Managed by puppet

die() {
    echo "UNKNOWN - $*" >&2
    exit 3
}

# Locate awk
AWK=$(command -v awk 2>/dev/null)
[ -n "$AWK" ] || die "awk not available"

# Locate printf
PRINTF=$(command -v printf 2>/dev/null)
[ -n "$PRINTF" ] || die "printf not available"

# Locate lsmod
LSMOD=$(command -v lsmod 2>/dev/null)
[ -n "$LSMOD" ] || die "lsmod not available"

# Locate nft
NFT=$(command -v nft 2>/dev/null)
[ -n "$NFT" ] || die "nft not available"

<% if @systemd_enable -%>
# Locate systemctl
SYSTEMCTL=$(command -v systemctl 2>/dev/null)
[ -n "$SYSTEMCTL" ] || die "systemctl not available"

<% end -%>

# Set some default values
BL_ITEMS=0
TABLE_EMPTY=""
RULES_TOTAL=0 
PERF_DATA=""
SEQ=0

crit() {
    $PRINTF 'CRITICAL - %s\n' "$*" >&2
    exit 2
}

add_ctr() {
    LABEL=$($PRINTF '%s\n' "$1" | tr -c 'A-Za-z0-9_' '_')
    PERF_DATA="${PERF_DATA}ctr_${LABEL}=${2:-0}c "
}

<% if @systemd_enable -%>
# Check if nftables is running
$SYSTEMCTL is-active --quiet "nftables" || crit "nftables service is not active"

<% end -%>
# Check if nftables is loaded in the kernel
$LSMOD | $AWK '/nf_tables/' >/dev/null 2>&1 || crit "nftables is not loaded in the kernel"

# Get ruleset
RULESET=$($NFT list ruleset 2>/dev/null) || crit "Failed to retrieve ruleset"
[ -z "$RULESET" ] && crit "No rules found | rules_total=${RULES_TOTAL} ${PERF_DATA}"

# Parse data
while IFS='=' read -r KEY VAL; do
    case $KEY in
        rules_total)  TOTAL_RULES=$VAL  ;;
        table_count)  TABLE_COUNT=$VAL  ;;
        table_perf)   TABLE_PERF=$VAL   ;;
        table_empty)  EMPTY_TABLES=$VAL ;;
    esac
done <<'EOF'
'"$(printf '%s\n' "$RULESET" | $AWK '
    BEGIN { FS="[[:space:]]+" }
    $1=="table" { fam=$2; tab=$3; tbl[fam SUBSEP tab]; next }
    $1=="chain" { inch=1; next }
    inch && /^[[:space:]]*}/ { inch=0; next }

    /^[[:space:]]*$/              { next }
    /^[[:space:]]*#/              { next }
    /^[[:space:]]*(type|policy)/  { next }
    /^[[:space:]]*(set|counter|flags|elements|size|timeout)/ { next }

    inch { cnt[fam SUBSEP tab]++ }

    END {
        tot=0; perf=\"\"; emp=\"\";
        for (t in tbl) {
            split(t,a,SUBSEP); f=a[1]; b=a[2]
            n=cnt[t]+0
            perf=perf sprintf(\"table_%s_%s=%d \",f,b,n)
            tot+=n
            if(n==0) emp=emp\" \"f\"/\"b
        }
        print \"rules_total=\"tot
        print \"table_count=\"length(tbl)
        print \"table_perf=\"perf
        print \"table_empty=\"emp
    }')"
EOF

# Set performance data
PERF_DATA="$table_perf"

# Check if we have any rules
[ -n "$TABLE_EMPTY" ] && crit "No rules in tables | rules_total=${RULES_TOTAL} ${PERF_DATA}"

# Try to get blacklist sets
printf '%s\n' "$RULESET" | $AWK '
    BEGIN { RS="\n"; fam=""; tab="" }
    /^table[[:space:]]+/      { fam=$2; tab=$3 }
    /^[[:space:]]*set[[:space:]]+[A-Za-z0-9_]+[[:space:]]+{/{
        set=$2; dyn=($0 ~ /flags[[:space:]]+.*dynamic/); next
    }
    dyn && /^[[:space:]]*flags[[:space:]]+.*dynamic/ { dyn=1 }
    dyn && /\}/ { print fam, tab, set; dyn=0 }
' | sort -u | while read -r FAM TAB SET; do
    CNT=$($NFT list set "$FAM" "$TAB" "$SET" 2>/dev/null | $AWK -v RS= '
        /elements[[:space:]]*=/{
            gsub(/\n/," ")
            sub(/.*{[[:space:]]*/,""); sub(/[[:space:]]*}.*/,"")
            n=split($0,a,",")
            for(i=1;i<=n;i++){
                gsub(/^[[:space:]]+|[[:space:]]+$/,"",a[i])
                if (a[i] ~ /^[0-9]+(\.[0-9]+){3}(\/[0-9]+)?$/ || a[i] ~ /:/) c++
            }
            print c
        }')
    BL_ITEMS=$((BL_ITEMS + ${CNT:-0}))
done

# Try to get named counters
$PRINTF '%s\n' "$RULESET" | $AWK -v RS='}' '
    /^counter[[:space:]]+[A-Za-z0-9_]+[[:space:]]*{/{
        name=$2
        if (match($0,/packets[[:space:]]+([0-9]+)/,m))
            print name, m[1]
    }' |
while read -r NAME PACK; do
    add_ctr "$NAME" "$PACK"
done

# Try to get inline counters
$PRINTF '%s\n' "$RULESET" | $AWK '/counter[[:space:]]+packets[[:space:]][0-9]+/ {print}' |
while IFS= read -r L; do
    PACK=$(echo "$L" | $AWK '{for(i=1;i<=NF;i++) if($i=="packets"){print $(i+1); break}}')
    COMM=$(echo "$L" | $AWK '{for(i=1;i<=NF;i++) if($i=="comment"){print $(i+1); break}}')
    COMM=$($PRINTF '%s\n' "$COMM" | tr -d '"')
    [ -z "$COMM" ] && { SEQ=$((SEQ+1)); COMM="rule_${SEQ}"; }
    add_ctr "$COMM" "$PACK"
done

# Set data
PERF_DATA="rules_total=${RULES_TOTAL} ${PERF_DATA}blacklist_items=${BL_ITEMS} "
TABLE_COUNT=$($PRINTF '%s\n' "$TABLES" | $AWK '/^table /{c++} END{print c+0}')

# Show output
echo "OK - ${RULES_TOTAL} rules in ${TABLE_COUNT} table(s), blacklist=${BL_ITEMS} | ${PERF_DATA}"
exit 0