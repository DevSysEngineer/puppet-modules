#!/bin/sh
# Managed by puppet

die() {
    echo "$*" >&2
    exit 3
}

# Locate awk
AWK=$(command -v awk 2>/dev/null)
[ -n "$AWK" ] || die "akw not available"

# Locate date
DATE=$(command -v date 2>/dev/null)
[ -n "$DATE" ] || die "date not available"

# Locate grep
GREP=$(command -v grep 2>/dev/null)
[ -n "$GREP" ] || die "grep not available"

# Locate printf
PRINTF=$(command -v printf 2>/dev/null)
[ -n "$PRINTF" ] || die "printf not available"

# Locate sed
SED=$(command -v sed 2>/dev/null)
[ -n "$SED" ] || die "sed not available"

<% if @systemd_enable -%>
# Locate systemctl
SYSTEMDCTL=$(command -v systemctl 2>/dev/null)
[ -n "$SYSTEMDCTL" ] || die "systemctl not available"

<% end -%>
# Locate tail
TAIL=$(command -v tail 2>/dev/null)
[ -n "$TAIL" ] || die "tail not available"

# Locate ps
PS=$(command -v ps 2>/dev/null)
[ -n "$PS" ] || die "ps not available"

# Locate wc
WC=$(command -v wc 2>/dev/null)
[ -n "$WC" ] || die "wc not available"

crit() {
    $PRINTF '%s\n' "$*" >&2
    exit 2
}

# Default values
CRIT_MSG=""
CRIT_NO_SCAN_DAYS=14  # CRITICAL if >14 days
CRIT_SIG_AGE_DAYS=7   # CRITICAL if older than 7 days
CRIT_UPDATE_MIN=720   # CRITICAL if >12 h (720 min)
ENGINE_VER=0
LAST_CLEAN=0
LAST_DET=0
LAST_SCAN_AGE=9999
LAST_SCAN_SECS=0
LSLOG=/opt/eset/efs/bin/lslog
NOW_EPOCH=`$DATE +%s`
SCANNED_FILES=0
SIG_AGE=0
SIG_DATE=""
STATE_CODE=0
STATE_LABEL="OK";
UPDATE_AGE_MIN=999999
UPD=/opt/eset/efs/bin/upd
WAP_FLAG=/opt/eset/efs/etc/WAP_DISABLED
WARN_MSG=""
WARN_NO_SCAN_DAYS=7   # WARNING if no on‑demand scan in >7 days
WARN_SIG_AGE_DAYS=1   # WARNING if signatures older than 1 day
WARN_UPDATE_MIN=180   # WARNING if no engine up$DATE for >3 h (180 min)

# Options 
while getopts 'n:N:s:S:u:U:h' opt; do
  case "$opt" in
    n) WARN_NO_SCAN_DAYS="$OPTARG" ;;
    N) CRIT_NO_SCAN_DAYS="$OPTARG" ;;
    s) WARN_SIG_AGE_DAYS="$OPTARG" ;;
    S) CRIT_SIG_AGE_DAYS="$OPTARG" ;;
    u) WARN_UPDATE_MIN="$OPTARG" ;;
    U) CRIT_UPDATE_MIN="$OPTARG" ;;
    *) die "Usage: $0 [-n <days>] [-N <days>] [-s <days>] [-S <days>] [-u <min>] [-U <min>]" ;;
  esac
done

add_crit() {
    CRIT_MSG="${CRIT_MSG:+$CRIT_MSG; }$1"
}

add_warn() {
    WARN_MSG="${WARN_MSG:+$WARN_MSG; }$1"
}

# Service running
<% if @systemd_enable -%>
$SYSTEMDCTL is-active --quiet "efs.service" || crit "ESET service is not active"
<% else -%>
$PS -C efs >/dev/null 2>&1 || crit "ESET service is not active"
<% end -%>

# Check essential ESET daemons
DAEMONS="oaeventd scand updated logd confd licensed utild sysinfod"
[ ! -f "$WAP_FLAG" ] && DAEMONS="$DAEMONS wapd"
for d in $DAEMONS; do
  $PS -e -o comm= | $GREP -qx "$d" || add_crit "$d down"
done

# Check kernel modules
$GREP -qw eset_rtp /proc/modules || add_crit "eset_rtp missing"
if [ ! -f "$WAP_FLAG" ]; then
  $GREP -qw eset_wap /proc/modules || add_crit "eset_wap missing"
fi

# Detection engine version & age
LINE=$($UPD -l 2>/dev/null | $GREP -m1 "Detection engine")
if [ -n "$LINE" ]; then
    ENGINE_VER=$($PRINTF '%s' "$LINE" | $AWK '{print $2}')
    SIG_DATE=$($PRINTF '%s' "$LINE" | $SED -n 's/.*(\(....-..-..\)).*/\1/p')
    if [ -n "$SIG_DATE" ]; then
        SIG_EPOCH=$($DATE -d "$SIG_DATE" +%s 2>/dev/null)
        SIG_AGE=$(( (NOW_EPOCH - SIG_EPOCH) / 86400 ))
    fi
fi
[ "$SIG_AGE" -ge "$CRIT_SIG_AGE_DAYS" ] && add_crit "defs ${SIG_AGE}d old"
[ "$SIG_AGE" -ge "$WARN_SIG_AGE_DAYS" ] && [ "$SIG_AGE" -lt "$CRIT_SIG_AGE_DAYS" ] && add_warn "defs ${SIG_AGE}d old"

# On‑demand scan stats
SCAN_CSV=$($LSLOG -s -c 2>/dev/null)
SCANS_TOTAL=$($PRINTF '%s' "$SCAN_CSV" | $TAIL -n +2 | $WC -l)
LAST_LINE=$($PRINTF '%s' "$SCAN_CSV" | $TAIL -n 1)
case "$LAST_LINE" in Time*|'') : ;;
    *)
        IFS=',' read STARTED _ SCANNED_FILES LAST_CLEAN LAST_DET DURATION _ <<EOF
$LAST_LINE
EOF
        LAST_EPOCH=$($DATE -d "$STARTED" +%s 2>/dev/null)
        LAST_SCAN_AGE=$(( (NOW_EPOCH - LAST_EPOCH) / 86400 ))
        IFS=':' read H M S <<EOF
$DURATION
EOF
        LAST_SCAN_SECS=$(( 10#$H*3600 + 10#$M*60 + 10#$S ))
    ;;
esac
[ "$LAST_SCAN_AGE" -ge "$CRIT_NO_SCAN_DAYS" ] && add_crit "no scan ${LAST_SCAN_AGE}d"
[ "$LAST_SCAN_AGE" -ge "$WARN_NO_SCAN_DAYS" ] && [ "$LAST_SCAN_AGE" -lt "$CRIT_NO_SCAN_DAYS" ] && add_warn "no scan ${LAST_SCAN_AGE}d"
[ "$LAST_DET" -gt 0 ] && add_crit "scan det=$LAST_DET"
[ "$LAST_CLEAN" -gt 0 ] && [ "$LAST_DET" -eq 0 ] && add_warn "scan cleaned=$LAST_CLEAN"

# Cumulative detections
DETECTIONS_TOTAL=$($LSLOG -d -c 2>/dev/null | $TAIL -n +2 | $WC -l | $AWK '{print $1}')

# Update gap
LAST_OK=$( $LSLOG -c 2>/dev/null | grep -F "Detection Engine was successfully updated" | $TAIL -n 1 )
[ -n "$LAST_OK" ] && UPDATE_AGE_MIN=$(( (NOW_EPOCH-$($DATE -d "$($PRINTF '%s' "$LAST_OK"|cut -d',' -f1)" +%s))/60 ))
[ "$UPDATE_AGE_MIN" -ge "$CRIT_UPDATE_MIN" ] && add_crit "no upd $((UPDATE_AGE_MIN/60))h"
[ "$UPDATE_AGE_MIN" -ge "$WARN_UPDATE_MIN" ] && [ "$UPDATE_AGE_MIN" -lt "$CRIT_UPDATE_MIN" ] && add_warn "upd gap $((UPDATE_AGE_MIN/60))h"

# Update error
UPDATES_FAILED=$($LSLOG -c 2>/dev/null | $GREP -F "Cannot check new application update" | $AWK -F',' '{print $1}' | while read TS; do [ $(( NOW_EPOCH - $($DATE -d "$TS" +%s 2>/dev/null) )) -le 3600 ] && printf x; done | $WC -l | $AWK '{print $1}')
[ "$UPDATES_FAILED" -gt 0 ] && add_warn "$UPDATES_FAILED update errors (1h)"
 
# Final label
[ -n "$CRIT_MSG" ] && {
    STATE_LABEL="CRITICAL";
    STATE_CODE=2;
}
[ -z "$CRIT_MSG" ] && [ -n "$WARN_MSG" ] && {
    STATE_LABEL="WARNING";
    STATE_CODE=1;
}

# Create message
MSG="ESET $STATE_LABEL – eng $ENGINE_VER (age ${SIG_AGE}d); scans $SCANS_TOTAL; detections $DETECTIONS_TOTAL; upd_age ${UPDATE_AGE_MIN}m"
[ -n "$CRIT_MSG" ] && MSG="$MSG | $CRIT_MSG"
[ -z "$CRIT_MSG" ] && [ -n "$WARN_MSG" ] && MSG="$MSG | $WARN_MSG"

# Create perf data
PERF="'engine_version'=${ENGINE_VER};;;;"
PERF="$PERF update_age=${UPDATE_AGE_MIN}m;${WARN_UPDATE_MIN};${CRIT_UPDATE_MIN};0;"
PERF="$PERF update_failed=${UPDATES_FAILED};;;;"
PERF="$PERF scans_total=${SCANS_TOTAL};;;;"
PERF="$PERF scanned_files=${SCANNED_FILES};;;;"
PERF="$PERF sig_age_days=${SIG_AGE};${WARN_SIG_AGE_DAYS};${CRIT_SIG_AGE_DAYS};0;"
PERF="$PERF last_scan_age_days=${LAST_SCAN_AGE};${WARN_NO_SCAN_DAYS};${CRIT_NO_SCAN_DAYS};0;"
PERF="$PERF last_scan_duration=${LAST_SCAN_SECS}s;;;;"
PERF="$PERF last_scan_cleaned=${LAST_CLEAN};;;;"
PERF="$PERF last_scan_detections=${LAST_DET};;;;"

# Show output
printf '%s | %s\n' "$MSG" "$PERF"
exit $EXIT