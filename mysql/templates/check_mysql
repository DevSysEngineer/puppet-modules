#!/bin/sh

# Managed by puppet

die() {
    echo "UNKNOWN - $*" >&2
    exit 3
}

# Locate awk
AWK=$(command -v awk 2>/dev/null)
[ -n "$AWK" ] || die "awk not available"

# Locate awk
BC=$(command -v bc 2>/dev/null)
[ -n "$BC" ] || die "bc not available"

# Locate mysqladmin
MYSQLADMIN=$(command -v mysqladmin 2>/dev/null)
[ -n "$MYSQLADMIN" ] || die "mysqladmin not available"

<% if @systemd_enable -%>
# Locate systemctl
SYSTEMDCTL=$(command -v systemctl 2>/dev/null)
[ -n "$SYSTEMDCTL" ] || die "systemctl not available"

<% end -%>
crit() {
    printf 'CRITICAL - %s\n' "$*" >&2
    exit 2
}

run() {
    "$@" 2>/dev/null
}

parse_to_int() {
    case "$1" in
        ''|*[!0-9]*) echo 0 ;;
        *)           echo "$1" ;;
    esac
}

get_field() {
    NEEDLE="$1"
    INPUT="$2"
    echo "$INPUT" | $AWK -F'|' -v n="$NEEDLE" '
    {
        gsub(/^ +| +$/, "", $2)  # trim column
        gsub(/^ +| +$/, "", $3)  # trim value
        if (toupper($2)==toupper(n)) { print $3; exit }
    }'
}

sf()  { get_field "$1" "$STATUS_OUT"; }
var() { get_field "$1" "$VAR_OUT"; }

# Set some values
DEFAULTS_FILE="/etc/mysql/debian.cnf"
WARN_CONN_CURR_PCT=90   # WARNING when current connections ≥90 %
CRIT_CONN_CURR_PCT=95   # CRITICAL at 95 %
WARN_CONN_PEAK_PCT=90   # WARNING when historical peak ≥90 %
CRIT_CONN_PEAK_PCT=95   # CRITICAL at 95 %
WARN_HIT_PCT=95         # WARNING when buffer‑hit <95 %
CRIT_HIT_PCT=90         # CRITICAL when buffer‑hit <90 %
STATE_CODE=0
ISSUES=""

# Extra options
while getopts "c:" opt; do
    case "$opt" in
        c) DEFAULTS_FILE="$OPTARG" ;;
        *) die "Usage: $0 [-c <config_file>]" ;;
    esac
done

# Check if config file exists
[ -r "$DEFAULTS_FILE" ] || crit "Defaults-file $DEFAULTS_FILE not readable"

<% if @systemd_enable -%>
# Check if mysql is running
$SYSTEMDCTL is-active --quiet "mysql.service" || crit "MySQL service is not active"

<% end -%>
# Check if mysql is running
run $MYSQLADMIN --defaults-file="$DEFAULTS_FILE" ping >/dev/null || crit "MySQL service running but not responding"

# Try to get data
STATUS_OUT=$(run $MYSQLADMIN --defaults-file="$DEFAULTS_FILE" extended-status) || die "Cannot read extended-status"
VAR_OUT=$(run $MYSQLADMIN --defaults-file="$DEFAULTS_FILE" variables)        || die "Cannot read variables"

# Parse data
THREADS_CONNECTED=$(parse_to_int "$(sf Threads_connected)")
THREADS_RUNNING=$(parse_to_int "$(sf Threads_running)")
SLOW_QUERIES=$(parse_to_int "$(sf Slow_queries)")
MAX_USED_CONN=$(parse_to_int "$(sf Max_used_connections)")
MAX_CONNECTIONS=$(parse_to_int "$(var max_connections)")
UPTIME=$(parse_to_int "$(sf Uptime)")
BUF_READ_REQ=$(parse_to_int "$(sf Innodb_buffer_pool_read_requests)")
BUF_READS=$(parse_to_int "$(sf Innodb_buffer_pool_reads)")
BUF_WAIT_FREE=$(parse_to_int "$(sf Innodb_buffer_pool_wait_free)")
BUF_PAGES_FREE=$(parse_to_int "$(sf Innodb_buffer_pool_pages_free)")
BUF_PAGES_TOTAL=$(parse_to_int "$(sf Innodb_buffer_pool_pages_total)")

# Derive metrics
if [ "$BUF_READ_REQ" -gt 0 ]; then
    HIT_RATE_PCT=$(echo "scale=1; (1-($BUF_READS/$BUF_READ_REQ))*100" | $BC)
else
    HIT_RATE_PCT="N/A"
fi

# Check if max connection is not zero
if [ "$MAX_CONNECTIONS" -gt 0 ]; then
    CONN_PCT=$((THREADS_CONNECTED * 100 / MAX_CONNECTIONS))
    if [ "$CONN_PCT" -ge "$CRIT_CONN_CURR_PCT" ]; then
        STATE_CODE=2
        ISSUES="Connections ${CONN_PCT}% (CRIT)."
    elif [ "$CONN_PCT" -ge "$WARN_CONN_CURR_PCT" ]; then
        STATE_CODE=1
        ISSUES="Connections ${CONN_PCT}% (WARN)."
    fi

    PEAK_PCT=$((MAX_USED_CONN * 100 / MAX_CONNECTIONS))
    if [ "$PEAK_PCT" -ge "$CRIT_CONN_PEAK_PCT" ]; then
        STATE_CODE=2
        ISSUES="Max used connections ever ${PEAK_PCT}% (CRIT). $ISSUES"
    elif [ "$PEAK_PCT" -ge "$WARN_CONN_PEAK_PCT" ]; then
        [ $STATE_CODE -lt 2 ] && STATE_CODE=1
        ISSUES="Max used connections ever ${PEAK_PCT}% (WARN). $ISSUES"
    fi

    # Set ABS
    WARN_CURR_ABS=$((MAX_CONNECTIONS * WARN_CONN_CURR_PCT / 100))
    CRIT_CURR_ABS=$((MAX_CONNECTIONS * CRIT_CONN_CURR_PCT / 100))
    WARN_PEAK_ABS=$((MAX_CONNECTIONS * WARN_CONN_PEAK_PCT / 100))
    CRIT_PEAK_ABS=$((MAX_CONNECTIONS * CRIT_CONN_PEAK_PCT / 100))
else
    STATE_CODE=3
    ISSUES="Max connection is zero (UNKN))."
    WARN_CURR_ABS=""
    CRIT_CURR_ABS=""
    WARN_PEAK_ABS=""
    CRIT_PEAK_ABS=""
fi

# Check if hit ratw is given
if [ "$HIT_RATE_PCT" != "N/A" ]; then
    INT_HIT=${HIT_RATE_PCT%.*}
    if [ "$INT_HIT" -lt "$CRIT_HIT_PCT" ]; then
        STATE_CODE=2; ISSUES="Hit rate ${HIT_RATE_PCT}% (CRIT). $ISSUES"
    elif [ "$INT_HIT" -lt "$WARN_HIT_PCT" ]; then
        [ $STATE_CODE -lt 2 ] && STATE_CODE=1
        ISSUES="Hit rate ${HIT_RATE_PCT}% (WARN). $ISSUES"
    fi
    WARN_HIT_ABS=$WARN_HIT_PCT
    CRIT_HIT_ABS=$CRIT_HIT_PCT
else
    WARN_HIT_ABS=""
    CRIT_HIT_ABS=""
fi

# Check if buffer wait is not zero
if [ "$BUF_WAIT_FREE" -gt 0 ]; then
    [ $STATE_CODE -lt 2 ] && STATE_CODE=1
    ISSUES="InnoDB waits ${BUF_WAIT_FREE}. $ISSUES"
fi

# Check if we have slow queries
if [ "$SLOW_QUERIES" -gt 0 ]; then
    [ $STATE_CODE -lt 2 ] && STATE_CODE=1
    ISSUES="Slow queries ${SLOW_QUERIES}. $ISSUES"
fi

# Set STATE_LABEL
case $STATE_CODE in
    0) STATE_LABEL="OK" ;;
    1) STATE_LABEL="WARNING" ;;
    2) STATE_LABEL="CRITICAL" ;;
    3) STATE_LABEL="UNKNOWN" ;;
esac

# Create message
MSG="MySQL alive (uptime ${UPTIME}s, Curr_conn ${THREADS_CONNECTED}/${MAX_CONNECTIONS}, "
MSG="${MSG}Peak_conn ${MAX_USED_CONN}, Threads_run ${THREADS_RUNNING}, Slow_q ${SLOW_QUERIES}, "
MSG="${MSG}Hit ${HIT_RATE_PCT}%)"
[ -n "$ISSUES" ] && MSG="${MSG} - Issues: ${ISSUES}"

# Set perform data
PERF="curr_connections=${THREADS_CONNECTED};${WARN_CURR_ABS};${CRIT_CURR_ABS};0;${MAX_CONNECTIONS} "
PERF="${PERF}max_used_connections=${MAX_USED_CONN};${WARN_PEAK_ABS};${CRIT_PEAK_ABS};0;${MAX_CONNECTIONS} "
PERF="${PERF}threads_running=${THREADS_RUNNING};;;0; "
PERF="${PERF}slow_queries=${SLOW_QUERIES};;;0; "
PERF="${PERF}hit_rate_pct=${HIT_RATE_PCT};${WARN_HIT_ABS};${CRIT_HIT_ABS};0;100 "
PERF="${PERF}innodb_pages_free=${BUF_PAGES_FREE};;;0;${BUF_PAGES_TOTAL}"

# Show result
printf '%s - %s | %s\n' "$STATE_LABEL" "$OUTPUT_MSG" "$PERF"
exit $STATE_CODE
