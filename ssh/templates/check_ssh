#!/bin/sh
# Managed by puppet

die() {
    echo "$*" >&2
    exit 3
}

# Locate awk
AWK=$(command -v awk 2>/dev/null)
[ -n "$AWK" ] || die "awk not available"

# Locate date
DATE=$(command -v date 2>/dev/null)
[ -n "$DATE" ] || die "date not available"

# Locate ps
PS=$(command -v ps 2>/dev/null)
[ -n "$PS" ] || die "ps not available"

# Locate printf
PRINTF=$(command -v printf 2>/dev/null)
[ -n "$PRINTF" ] || die "printf not available"

# Locate sed
SED=$(command -v sed 2>/dev/null)
[ -n "$SED" ] || die "sed not available"

<% if @systemd_enable -%>
# Locate systemctl
SYSTEMDCTL=$(command -v systemctl 2>/dev/null)
[ -n "$SYSTEMDCTL" ] || die "systemctl not available"

<% end -%>
# Locate wc
WC=$(command -v wc 2>/dev/null)
[ -n "$WC" ] || die "wc not available"

# Locate who
WHO=$(command -v who 2>/dev/null)
[ -n "$WHO" ] || die "who not available"

crit() {
    $PRINTF '%s\n' "$*" >&2
    exit 2
}

# Default thresholds
CRIT_THRESH=2      # critical session count (active)
WARN_THRESH=1      # warning session count (active)
TIMEFRAME=10       # minutes to look back for auth failures
MAX_IDLE=5         # minutes: session idle-time ≤ MAX_IDLE ⇒ active
MAX_AGE=30         # minutes: session age   >  MAX_AGE  ⇒ CRITICAL
STATE_CODE=0

# Parse options
while getopts 'c:w:t:i:a:' opt; do
    case "$opt" in
        c) CRIT_THRESH="$OPTARG" ;;
        w) WARN_THRESH="$OPTARG" ;;
        t) TIMEFRAME="$OPTARG" ;;
        i) MAX_IDLE="$OPTARG" ;;
        a) MAX_AGE="$OPTARG" ;;
        *) die "Usage: $0 [-c <crit>] [-w <warn>] [-t <fail-minutes>] [-i <max-idle>] [-a <max-age>]" ;;
    esac
done

# Service check
<% if @systemd_enable -%>
$SYSTEMDCTL is-active --quiet "<%= @service %>" || crit "SSH service is not active"
<% else -%>
$PS -C sshd >/dev/null 2>&1 || crit "SSH service is not active"
<% end -%>

# Analyse current SSH sessions
WHO_OUTPUT=$($WHO -u)
NOW_EPOCH=$($DATE +%s)
ACTIVE_SESSIONS=0
ROOT_LOGIN=false
AGE_CRIT=false

# Count zombie sshd processes
ZOMBIE_COUNT=$($PS -C sshd -o stat= | $AWK '$0 ~ /Z/ {c++} END {print c+0}')

while read -r USER TTY LOGIN_DATE LOGIN_TIME IDLE _; do
    # Skip empty lines
    [ -z "$USER" ] && continue

    # Root login detection
    [ "$USER" = "root" ] && ROOT_LOGIN=true

    # Determine idle minutes
    case "$IDLE" in
        '.')    IDLE_MIN=0 ;;
        'old')  IDLE_MIN=$((MAX_IDLE + 1)) ;;
        *:* )   H=${IDLE%%:*}; M=${IDLE##*:}; H=${H#0}; M=${M#0}; [ -z "$H" ] && H=0; [ -z "$M" ] && M=0; IDLE_MIN=$((H*60 + M)) ;;
        *d)     D=${IDLE%%[^0-9]*}; IDLE_MIN=$((D*1440)) ;;
        *)      IDLE_MIN=$((MAX_IDLE + 1)) ;;
    esac

    # Count processes on TTY; silence ps error when TTY is stale
    PROC_COUNT=$($PS -t "$TTY" --no-headers 2>/dev/null | wc -l)
    [ -z "$PROC_COUNT" ] && PROC_COUNT=0

    # Session is active if ≥1 proc OR idle ≤ threshold
    if [ "$PROC_COUNT" -ge 1 ] || [ "$IDLE_MIN" -le "$MAX_IDLE" ]; then
        ACTIVE_SESSIONS=$((ACTIVE_SESSIONS + 1))
    fi

    # Age check
    LOGIN_EPOCH=$($DATE -d "$LOGIN_DATE $LOGIN_TIME" +%s 2>/dev/null) || LOGIN_EPOCH=0
    if [ "$LOGIN_EPOCH" -ne 0 ]; then
        AGE_MIN=$(((NOW_EPOCH - LOGIN_EPOCH)/60))
        [ "$AGE_MIN" -gt "$MAX_AGE" ] && AGE_CRIT=true
    fi
done <<EOF
$WHO_OUTPUT
EOF

# Auth failure detection
if [ -f /var/log/auth.log ]; then
    TIMESTAMP=$($DATE --date="$TIMEFRAME minutes ago" +"%b %e %H")
    FAIL_COUNT=$($AWK -v t="$TIMESTAMP" '($0 ~ t) && /sshd/ && (/Failed password/ || /Failed publickey/ || /Invalid user/ || /authentication failure/){c++} END {print c+0}' /var/log/auth.log)
else
    FAIL_COUNT=0
fi

# Determine state
[ "$ROOT_LOGIN" = true ] && STATE_CODE=2
[ "$AGE_CRIT" = true ] && STATE_CODE=2
if [ "$ROOT_LOGIN" = false ] && [ "$AGE_CRIT" = false ]; then
    if [ "$ACTIVE_SESSIONS" -ge "$CRIT_THRESH" ]; then
        STATE_CODE=2
    elif [ "$ACTIVE_SESSIONS" -ge "$WARN_THRESH" ] && [ $STATE_CODE -lt 1 ]; then
        STATE_CODE=1
    fi
fi
[ "$ZOMBIE_COUNT" -gt 0 ] && [ $STATE_CODE -lt 1 ] && STATE_CODE=1

# Create message
EXTRA=""
[ "$ROOT_LOGIN" = true ] && EXTRA="${EXTRA}root login, "
[ "$AGE_CRIT" = true ] && EXTRA="${EXTRA}age> ${MAX_AGE}m, "
[ "$ZOMBIE_COUNT" -gt 0 ] && EXTRA="${EXTRA}${ZOMBIE_COUNT} zombies, "
[ "$FAIL_COUNT" -gt 0 ] && EXTRA="${EXTRA}${FAIL_COUNT} auth fails, "
EXTRA=$(echo "$EXTRA" | $SED 's/, $//')
[ -n "$EXTRA" ] && EXTRA=" ($EXTRA)"

# Output
$PRINTF '%s active SSH session(s)%s | sessions=%s;%s;%s;0; zombies=%s;;; fails=%s;;; age_crit=%s;;;\n' "$ACTIVE_SESSIONS" "$EXTRA" "$ACTIVE_SESSIONS" "$WARN_THRESH" "$CRIT_THRESH" "$ZOMBIE_COUNT" "$FAIL_COUNT" "$([ "$AGE_CRIT" = true ] && echo 1 || echo 0)"
exit "$STATE_CODE"
