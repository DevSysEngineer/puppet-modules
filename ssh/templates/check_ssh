#!/bin/sh

# Managed by puppet

die() {
    printf 'UNKNOWN - %s\n' "$*" >&2
    exit 3
}

# Locate date
AWK=$(command -v awk 2>/dev/null)
[ -n "$AWK" ] || die "awk not available"

# Locate date
DATE=$(command -v date 2>/dev/null)
[ -n "$DATE" ] || die "date not available"

# Locate grep
GREP=$(command -v grep 2>/dev/null)
[ -n "$GREP" ] || die "grep not available"

# Locate ps
PS=$(command -v ps 2>/dev/null)
[ -n "$PS" ] || die "ps not available"

# Locate printf
PRINTF=$(command -v printf 2>/dev/null)
[ -n "$PRINTF" ] || die "printf not available"

<% if @systemd_enable -%>
# Locate systemctl
SYSTEMDCTL=$(command -v systemctl 2>/dev/null)
[ -n "$SYSTEMDCTL" ] || die "systemctl not available"

<% end -%>
crit() {
    printf 'CRITICAL - %s\n' "$*" >&2
    exit 2
}

# Set some default values
CRIT_THRESH=2
FAIL_COUNT=0
STATE_LABEL="OK";
STATE_CODE=0
TIMEFRAME=10
WARN_THRESH=1
WHO_OUT=$(who)
ZOMBIE_FLAG=false

# Extra options
while getopts 'c:t:w:' opt; do
    case "$opt" in
        c) CRIT_THRESH="$OPTARG" ;;
        t) TIMEFRAME="$OPTARG" ;;
        w) WARN_THRESH="$OPTARG" ;;
        *) die "Usage: $0 [-c <critical>] [-t <minutes>] [-w <warning>]" ;;
    esac
done

<% if @systemd_enable -%>
# Check if ssh is running
$SYSTEMDCTL is-active --quiet "<%= @service %>" || crit "SSH service is not active"
<% else -%>
# Check if sshd process is running
ps -C sshd >/dev/null 2>&1 || crit "SSH service is not active"
<% end -%>

# Count active SSH sessions (lines containing pts/) 
SESSION_COUNT=$($PRINTF '%s\n' "$WHO_OUT" | $GREP -c 'pts/')
[ -z "$SESSION_COUNT" ] && SESSION_COUNT=0

# Check if root is logged in
if $PRINTF '%s\n' "$WHO_OUT" | $GREP -q '^root[[:space:]]'; then
    ROOT_LOGIN=true
    STATE_LABEL="CRITICAL"
    STATE_CODE=2
else
    ROOT_LOGIN=false
fi

# Determine base status from session thresholds
if [ "$ROOT_LOGIN" = false ]; then
    if [ "$SESSION_COUNT" -ge "$CRIT_THRESH" ]; then
        STATE_LABEL="CRITICAL"
        STATE_CODE=2
    elif [ "$SESSION_COUNT" -ge "$WARN_THRESH" ]; then
        STATE_LABEL="WARNING"
        STATE_CODE=1
    fi
fi

# Check for SSH authentication failures (last 10 minutes)
if [ -f /var/log/auth.log ]; then
    TIMESTAMP=$($DATE --date="$TIMEFRAME minutes ago" +"%b %e %H")
    FAIL_COUNT=$($AWK -v t="$TIMESTAMP" '($0 ~ t) && /sshd/ && (/Failed password/ || /Failed publickey/ || /Invalid user/ || /authentication failure/){c++} END {print c+0}' /var/log/auth.log)
else
    FAIL_COUNT=0
fi

# Check for zombie sshd processes
ZOMBIE_COUNT=$($PS -C sshd -o stat= | $GREP -c Z)
if [ "$ZOMBIE_COUNT" -gt 0 ]; then
    ZOMBIE_FLAG=true
    if [ $STATE_CODE -lt 2 ]; then
        [ $STATE_CODE -lt 1 ] && {
            STATE_LABEL="WARNING";
            STATE_CODE=1;
        }
    fi
fi

# Compile output message
EXTRA_MSG=""
[ "$ROOT_LOGIN" = true ] && EXTRA_MSG="${EXTRA_MSG}root login detected, "
[ "$ZOMBIE_FLAG" = true ] && EXTRA_MSG="${EXTRA_MSG}${ZOMBIE_COUNT} zombie procs, "
[ "$FAIL_COUNT" -gt 0 ] && EXTRA_MSG="${EXTRA_MSG}${FAIL_COUNT} auth failures, "
EXTRA_MSG=$(echo "$EXTRA_MSG" | sed 's/, $//')
[ -n "$EXTRA_MSG" ] && EXTRA_MSG=" (${EXTRA_MSG})"

# Output & exit
echo "${STATE_LABEL} - ${SESSION_COUNT} SSH session(s) active${EXTRA_MSG} | sessions=${SESSION_COUNT};${WARN_THRESH};${CRIT_THRESH};0; zombies=${ZOMBIE_COUNT};;; fails=${FAIL_COUNT};;;"
exit $STATE_CODE
